{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","dbConnection","db","app","use","express","static","bodyParser","json","get","req","res","filter","query","status","console","log","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","newissue","MongoClient","connect","connection","listen"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEAA,2BAAiBC,OAAjB;;AAEA,IAAIC,YAAJ;AACA,IAAIC,EAAJ;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEAL,IAAIM,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjC,UAAMC,SAAS,EAAf;;AAEA,QAAIF,IAAIG,KAAJ,CAAUC,MAAd,EAAsB;AAClBF,eAAOE,MAAP,GAAgBJ,IAAIG,KAAJ,CAAUC,MAA1B;AACH;AACDC,YAAQC,GAAR,CAAYJ,MAAZ;;AAEAV,OAAGe,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6BN,MAA7B,EAAqCO,OAArC,GACCC,IADD,CACMC,UAAU;AACZ,cAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAb,YAAIH,IAAJ,CAAS,EAAEiB,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACH,KAJD,EAKCM,KALD,CAKOC,SAAS;AACZb,gBAAQC,GAAR,CAAYY,KAAZ;AACAjB,YAAIG,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAAEqB,SAAU,0BAAyBD,KAAM,EAA3C,EAArB;AACH,KARD;AASH,CAjBD;;AAoBAzB,IAAI2B,IAAJ,CAAS,aAAT,EAAwB,CAACpB,GAAD,EAAMC,GAAN,KAAc;AAClC,UAAMoB,WAAWrB,IAAIsB,IAArB;AACAD,aAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;;AAEA,QAAI,CAACH,SAASjB,MAAd,EAAsB;AAClBiB,iBAASjB,MAAT,GAAkB,KAAlB;AACH;AACD,UAAMqB,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,QAAII,GAAJ,EAAS;AACLxB,YAAIG,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAAEqB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACH;;AAEDjC,OAAGe,UAAH,CAAc,QAAd,EAAwBqB,SAAxB,CAAkCF,gBAAMG,YAAN,CAAmBR,QAAnB,CAAlC,EACCX,IADD,CACMoB,UAAU;AACZtC,WAAGe,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEuB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACCC,IADD;AAEH,KAJD,EAKCxB,IALD,CAKMyB,YAAY;AACdlC,YAAIH,IAAJ,CAASqC,QAAT;AACH,KAPD,EAQClB,KARD,CAQOC,SAAS;AACZb,gBAAQC,GAAR,CAAY,OAAZ;AACAL,YAAIG,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAACqB,SAAU,yBAAwBD,KAAM,EAAzC,EAArB;AACH,KAXD;AAYH,CAzBD;;AA2BAkB,qBAAYC,OAAZ,CAAoB,qBAApB,EAA2C3B,IAA3C,CAAgD4B,cAAc;AAC1D/C,mBAAe+C,UAAf;AACA9C,SAAKD,aAAaC,EAAb,CAAgB,cAAhB,CAAL;;AAEAC,QAAI8C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBlC,gBAAQC,GAAR,CAAY,0BAAZ;AACH,KAFD;AAGH,CAPD,EAQCW,KARD,CAQOC,SAAS;AACZb,YAAQC,GAAR,CAAY,QAAZ,EAAsBY,KAAtB;AACH,CAVD","file":"server.js","sourcesContent":["import 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport SourceMapSupport from 'source-map-support';\r\n\r\nSourceMapSupport.install();\r\n\r\nlet dbConnection;\r\nlet db;\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.get('/api/issues', (req, res) => {\r\n    const filter = {};\r\n\r\n    if (req.query.status) {\r\n        filter.status = req.query.status;\r\n    }\r\n    console.log(filter);\r\n\r\n    db.collection('issues').find(filter).toArray()\r\n    .then(issues => {\r\n        const metadata = { total_count: issues.length };\r\n        res.json({ _metadata: metadata, records: issues });\r\n    })\r\n    .catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n    });\r\n});\r\n\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    const newIssue = req.body;\r\n    newIssue.created = new Date();\r\n\r\n    if (!newIssue.status) {\r\n        newIssue.status = 'New';\r\n    }\r\n    const err = Issue.validateIssue(newIssue);\r\n    if (err) {\r\n        res.status(422).json({ message: `Invalid request: ${err}` });\r\n        return;\r\n    }\r\n\r\n    db.collection('issues').insertOne(Issue.cleanupIssue(newIssue))\r\n    .then(result => {\r\n        db.collection('issues').find({ _id: result.insertedId }).limit(1)\r\n        .next();\r\n    })\r\n    .then(newissue => {\r\n        res.json(newissue);\r\n    })\r\n    .catch(error => {\r\n        console.log('error');\r\n        res.status(500).json({message: `Internal Server Error ${error}`});\r\n    });\r\n});\r\n\r\nMongoClient.connect('mongodb://localhost').then(connection => {\r\n    dbConnection = connection;\r\n    db = dbConnection.db('issuetracker');\r\n\r\n    app.listen(3000, () => {\r\n        console.log('App started on port 3000');\r\n    });\r\n})\r\n.catch(error => {\r\n    console.log('ERROR:', error);\r\n});"]}